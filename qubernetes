#!/usr/bin/env ruby

require "yaml"
require "erb"
require 'colorize'

# setup the config file to use to generate the kubernetes API resources.
@CONFIG_FILE = "qubernetes.yaml"
@OPTIONAL_CONFIG_FILE=ARGV[0]
ARGV.clear


if @OPTIONAL_CONFIG_FILE != nil
  @CONFIG_FILE = @OPTIONAL_CONFIG_FILE
end
puts "using config file: " + @CONFIG_FILE
@config                = YAML.load_file(@CONFIG_FILE)

@nodes                 = YAML.load_file("nodes.yaml")["nodes"]

## set defaults for config if not set, else use the values from the config.

# used in deployment.yaml.erb to set quorum data dir.
@Node_DataDir = "/etc/quorum/qdata"
if @config["quorum"]["Node_DataDir"]
  @Node_DataDir = @config["quorum"]["Node_DataDir"]
end

# used by quorum-shared-config.yaml.erb and quorum-keystore.yaml.erb to load keys.
@Key_Dir_Base = "out/config"
if @config["quorum"]["Key_Dir_Base"]
  @Key_Dir_Base  = @config["quorum"]["Key_Dir_Base"]
end

# used by quorum-shared-config.yaml.erb to load the permissioned-nodes.json in configmaps
@Permissioned_Nodes_File = "out/config/permissioned-nodes.json"
if @config["quorum"]["Permissioned_Nodes_File"]
  @Permissioned_Nodes_File = @config["quorum"]["Permissioned_Nodes_File"]
end

# used by quorum-genesis-config.yaml.erb and quorum-shared-config.yaml.erb
@Genesis_File = "out/config/genesis.json"
if @config["quorum"]["Genesis_File"]
  @Genesis_File = @config["quorum"]["Genesis_File"]
end

# used in quorum-shared-config.yaml.erb to make tessera config available to deployments.
@Tessera_Config_Dir = "out/config"
if @config["quorum"]["tm"]["Tessera_Config_Dir"]
  @Tessera_Config_Dir = @config["quorum"]["tm"]["Tessera_Config_Dir"]
end

## default the ports if they aren't set
@Raft_Port = 50401
if @config["quorum"]["quorum"]["Raft_Port"]
  @Raft_Port = @config["quorum"]["quorum"]["Raft_Port"]
end

@Tm_Port = 9001
if @config["quorum"]["tm"]["Port"]
  @Tm_Port = @config["quorum"]["tm"]["Port"]
end

@Tm_3Party_Port = 9080
if @config["quorum"]["tm"]["3Party_Port"]
  @Tm_3Party_Port = @config["quorum"]["tm"]["3Party_Port"]
end

@Node_RPCPort = 8545
if @config["geth"] and @config["geth"]["Node_RPCPort"]
  @Node_RPCPort = @config["geth"]["Node_RPCPort"]
end

@Node_WSPort = 8546
if @config["geth"] and @config["geth"]["Node_WSPort"]
  @Node_WSPort = @config["geth"]["Node_WSPort"]
end

@NodeP2P_ListenAddr = 30303
if @config["geth"] and @config["geth"]["NodeP2P_ListenAddr"]
  @NodeP2P_ListenAddr = @config["geth"]["NodeP2P_ListenAddr"]
end


# Generate deployments in a single file, or in separate files.
@sep_deployment_files=true
if @config["k8s"] and @config["k8s"]["sep_deployment_files"] != nil
  @sep_deployment_files = @config["k8s"]["sep_deployment_files"]
end

# If the namespace is set in the config, create it and add it to all the resources.
@Namespace = ""
if @config["k8s"] and @config["k8s"]["namespace"] != nil and @config["k8s"]["namespace"] != ""
@Namespace = "namespace: " + @config["k8s"]["namespace"]
end

# What kind of persistent storage is desired?
# Supported storage type as of 2020 March 11 is only Persistant Volume Claims, and hostPath is no longer supported.
@Storage_Type          = "PVC"

#####################
# Create config files for each node
#####################

def set_node_template_vars(values)
  @Node_UserIdent        = values["Node_UserIdent"]
  @Node_Key_Dir          = values["Key_Dir"]
  return
end


# create the output directory if it doesn't exist
`mkdir -p out`

@base_template_path = "templates/k8s"
#puts (sed_string)

if @Namespace != ""
  File.open("out/00-namespace.yaml", "w") do |f|
    f.puts (ERB.new(File.read(@base_template_path  + "/namespace.yaml.erb"), nil, "-").result)
  end
end

puts "PVC"

if @Storage_Type == "PVC"
  # there is a custom storage class set, e.g. for EKS storage class.
  if  @config.dig("k8s", "storage", "PVC", "storageClass","template")
    @storage_class_template = @config["k8s"]["storage"]["PVC"]["storageClass"]["template"]
    File.open("out/00-quorum-persistent-volumes.yaml", "w") do |f|
      f.puts (ERB.new(File.read(@base_template_path + "/storage-classes/" + @storage_class_template + ".yaml.erb"), nil, "-").result)
    end
    File.open("out/00-quorum-persistent-volumes.yaml", "a") do |f|
      f.puts (ERB.new(File.read(@base_template_path + "/persistent-volumes.yaml.erb"), nil, "-").result)
    end
  else
    File.open("out/00-quorum-persistent-volumes.yaml", "w") do |f|
      f.puts (ERB.new(File.read(@base_template_path + "/persistent-volumes.yaml.erb"), nil, "-").result)
    end
  end
end

File.open("out/01-quorum-genesis.yaml", "w") do |f|
  f.puts (ERB.new(File.read(@base_template_path + "/quorum-genesis-config.yaml.erb"), nil, "-").result)
end
File.open("out/02-quorum-shared-config.yaml", "w") do |f|
  f.puts (ERB.new(File.read(@base_template_path + "/quorum-shared-config.yaml.erb"), nil, "-").result)
end
# Create the service resources
File.open("out/03.0-quorum-services.yaml", "w") do |f|
  f.puts (ERB.new(File.read(@base_template_path + "/quorum-services.yaml.erb"), nil, "-").result)
end

# Create the Ingress resources if they are configured
if @config["k8s"] and @config["k8s"]["service"] and @config["k8s"]["service"]["Ingress"]
  File.open("out/03.1-quorum-ingress.yaml", "w") do |f|
    f.puts (ERB.new(File.read(@base_template_path + "/quorum-ingress.yaml.erb"), nil, "-").result)
  end
end

# make all keystore resources (configMap)
File.open("out/04-quorum-keyconfigs.yaml", "w") do |f|
  f.puts (ERB.new(File.read(@base_template_path + "/quorum-keystore.yaml.erb"), nil, "-").result)
end

# if a network policy was requested create one for the namespace (NetworkPolicy = true in yaml config)
if  @config.dig("k8s","service","NetworkPolicy")
  File.open("out/05-quorum-network-policy.yaml", "w") do |f|
    f.puts (ERB.new(File.read(@base_template_path + "/network-policy.yaml.erb"), nil, "-").result)
  end
end
puts "deployments"
@Kubectl_Cmd="  $> kubectl apply -f out"
if @sep_deployment_files
 `mkdir -p out/deployments`
 ct=1
 @nodes.each do |node|
   set_node_template_vars(node)
   # create each deployment in a separate file.
   File.open("out/deployments/0" + ct.to_s + "-quorum-single-deployment.yaml", "w") do |f|
     f.puts (ERB.new(File.read(@base_template_path + "/quorum-deployment.yaml.erb"), nil, "-").result)
   end
   ct = ct + 1
 end
 @Kubectl_Cmd="  $> kubectl apply -f out -f out/deployments"
else
  File.open("out/05-quorum-deployments.yaml", "w") do |f|
    f.puts("---")
  end
  @nodes.each do |node|
    set_node_template_vars(node)
    # create each deployment in a separate file.
    File.open("out/05-quorum-deployments.yaml", "a") do |f|
      f.puts (ERB.new(File.read(@base_template_path + "/quorum-deployment.yaml.erb"), nil, "-").result)
      f.puts("---")
    end
  end
end

# End of core quorum network resources.
# The following are ancillary quorum deployments for monitoring, metrics, etc.

if @config["prometheus"]
  `rm -f out/config/prometheus.yml`
  File.open("out/config/prometheus.yml", "a") do |f|
    f.puts (ERB.new(File.read("templates/monitor/prometheus.yml.erb"), nil, "-").result)
  end

  `rm -f out/06-quorum-monitor.yaml`
  File.open("out/06-quorum-monitor.yaml", "a") do |f|
    f.puts (ERB.new(File.read(@base_template_path + "/monitor.yaml.erb"), nil, "-").result)
    f.puts("---")
  end
end

## deploy cakeshop as a deployment if enabled
if @config["cakeshop"] and @config["cakeshop"]["version"]
  File.open("out/07-cakeshop.yaml", "w") do |f|
    f.puts (ERB.new(File.read(@base_template_path + "/cakeshop.yaml.erb"), nil, "-").result)
    f.puts("---")
  end
end

puts("\n")
puts "  Success! ".green
puts("\n")
puts("  Quorum Kubernetes resource files have been generated in the `out/` directory.")
puts("\n")
puts("  To deploy to kubernetes run:")
puts("\n")
puts(@Kubectl_Cmd)
puts("\n")

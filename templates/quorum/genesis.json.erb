<%
def set_node_template_vars(values)
    @Node_UserIdent        = values["Node_UserIdent"]
    @Node_Key_Dir          = values["Key_Dir"]
    return
end

@Chain_Id  = 1101
if @config["genesis"] and @config["genesis"]["Chain_Id"]
  @Chain_Id = @config["genesis"]["Chain_Id"]
end
## The genesis consensus and the quorum version must be set in the config file.
@Genesis_Consensus = @config["genesis"]["consensus"]
# if the qibftblock is set, the network will switch over to qibft consensus
# when the specified block number is reached.
if @config["genesis"]["qibftBlock"]
  @Qibft_Block = @config["genesis"]["qibftBlock"]
end
@Genesis_Quorum_Version = @config["genesis"]["Quorum_Version"]

@Account_Allocs = ""
@Node_Index = 0

-%>

<% if @Genesis_Consensus == "raft" %>
{
"alloc": {
<%- @nodes.each_with_index do |node, indexNode|

    set_node_template_vars(node)
    puts(@Node_Key_Dir)
    @Keystores=Dir[@Key_Dir_Base + "/" + @Node_Key_Dir + "/acctkey*"]
    puts(@Keystores)
    # Need to keep track of when the last account in the last node
    # is being writen, so as not to have a trailing ',' in the
    # genesis alloc json.
    # The keystore is assumed to be the generated keystore and will
    # start with UTC- and end with the account public key.
    @Keystores.each_with_index do |keystore, indexKey|
        pkCmd = "ethkey inspect --passwordfile #{@Key_Dir_Base}/#{@Node_Key_Dir}/password.txt " + keystore + " | grep Address | awk '{print $2}'"
        puts(pkCmd)
        acct=`#{pkCmd}`
        acct=acct.strip
        puts(acct)
    -%>    "<%= acct%>": {
       "balance": "1000000000000000000000000000"
    }<%- if (indexNode == @nodes.size - 1) and (indexKey == @Keystores.size - 1)
     else %>, <%- end %>
    <%-
        puts(acct)
    end
     -%>
<% end %>
  },
  "coinbase": "0x0000000000000000000000000000000000000000",
  "config": {
    "homesteadBlock": 0,
    "byzantiumBlock": 0,
    "constantinopleBlock": 0,
    "petersburgBlock": 0,
    "istanbulBlock": 0,
    "privacyEnhancementsBlock": 0,
    "eip150block": 0,
    "eip150hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "eip155block": 0,
    "eip158block": 0,
    <%-# for 2.6 maxCodeSize config has changed. -%>
    <%- if @Genesis_Quorum_Version >= "2.6.0" -%>
    "maxCodeSizeConfig" : [
      {
        "block" : 0,
        "size" : 32
      }
    ],
    <%- else -%> <%# for v2.4 and 2.5 support maxCodeSize config has changed. %>
    "maxCodeSize": 35,
    "maxCodeSizeChangeBlock" : 0,
    <%- end -%>
    "chainId": <%= @Chain_Id %>,
    "isQuorum":true
  },
  "difficulty": "0x0",
  "extradata": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "gaslimit": "0xE0000000",
  "mixhash": "0x00000000000000000000000000000000000000647572616c65787365646c6578",
  "nonce": "0x0",
  "parenthash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "timestamp": "0x00"
}
<% elsif @Genesis_Consensus == "istanbul" ||  @Genesis_Consensus == "qibft" %>
{
"alloc": {
<%- @nodes.each_with_index do |node, indexNode|
    set_node_template_vars(node)
    @Keystores=Dir[@Key_Dir_Base + "/" + @Node_Key_Dir + "/acctkey*"]
    puts(@Keystores)
    # Need to keep track of when the last account in the last node
    # is being writen, so as not to have a trailing ',' in the
    # genesis alloc json.
    # The keystore is assumed to be the generated keystore and will
    # start with UTC- and end with the account public key.
    @Keystores.each_with_index do |keystore, indexKey|
        pkCmd = "ethkey inspect --passwordfile #{@Key_Dir_Base}/#{@Node_Key_Dir}/password.txt " + keystore + " | grep Address | awk '{print $2}'"
        puts(pkCmd)
        acct=`#{pkCmd}`
        acct=acct.strip
        puts(acct)
    -%>    "<%= acct%>": {
       "balance": "1000000000000000000000000000"
    }<%- if (indexNode == @nodes.size - 1) and (indexKey == @Keystores.size - 1)
     else %>, <%- end %>
    <%-
        puts(acct)
    end
     -%>
<% end %>

  },
  "coinbase": "0x0000000000000000000000000000000000000000",
  "config": {
    "homesteadBlock": 0,
    "byzantiumBlock": 0,
    "constantinopleBlock": 0,
    "petersburgBlock": 0,
    "istanbulBlock": 0,
    "privacyEnhancementsBlock": 0,
    "eip150Block": 0,
    "eip150Hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "eip155Block": 0,
    "eip158Block": 0,
    "istanbul": {
      <%- if @Qibft_Block -%>
      "qibftBlock": <%= @Qibft_Block %>,
      <%- end -%>
      "epoch": 30000,
      "policy": 0
    },
    <%-# for 2.6 maxCodeSize config has changed. -%>
    <%- if @Genesis_Quorum_Version >= "2.6.0" -%>
    "maxCodeSizeConfig" : [
      {
        "block" : 0,
        "size" : 32
      }
    ],
    <%- else -%> <%# for v2.4 and 2.5 support maxCodeSize config has changed. %>
    "maxCodeSize": 35,
    "maxCodeSizeChangeBlock" : 0,
    <%- end -%>
    "chainId": <%= @Chain_Id %>,
    "isQuorum": true
  },

  <%-
   # generate extraData from all nodekeys
   # create a istanbul validator config
   # see: https://github.com/jpmorganchase/istanbul-tools/blob/master/cmd/istanbul/example/config.toml
   # https://github.com/jpmorganchase/istanbul-tools
   # $> istanbul extra encode --config ./cmd/istanbul/example/config.toml
   #
   # Note: this requires istanbul-tools and nodejs to be installed on the host.
   #
   # for each node we need to generate their istanbul account which will be placed inside the
   # extradata field and used to verify the validators.
   # To do this, we need to create the istanbul-validator-config.toml from the ethereum nodekey. The istanbul-validator-config.toml
   # is then given as input to the istanbul tool, which will calculate the necessary extradata field.
  %>
  <%-
   extraData=`istanbul extra encode --config #{@Istanbul_Validator_Config} | awk '{print $4}'`
   extraData=extraData.strip
   puts("Generated istanbul \"extraData\"=\"" + extraData + "\"")
   -%>
  "difficulty": "0x1",
  "extraData": "<%= extraData%>",
  "gasLimit": "0xE0000000",
  "mixHash": "0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365",
  "nonce": "0x0",
  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "timestamp": "0x00"
}
<% else  %>
  ANOTHER CONSENSUS
<% end %>
